# -*- coding: utf-8 -*-
"""nhanes.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1KOz-uOFw0skcWhSH8aPgFswCkuElf4kZ
"""

# Load Files - demographics

import pandas as pd

from google.colab import files
uploaded = files.upload()

import pandas as pd
# Upload DEMO_L.XPT

demo_data = pd.read_sas('DEMO_L.XPT', format='xport')

# Rows of data

print(demo_data.head())

# RIDAGEYR - Age In Years - continuous
age_data = demo_data ['RIDAGEYR']
print(age_data.head())

# Load -  Demographics

import pandas as pd
demographic_path = 'DEMO_L.XPT'
demo = pd.read_sas(demographic_path, format='xport') #, encoding='latin1')  # Try 'latin1' or 'iso-8859-1' if UTF-8 fails
demo

# Load Files - Survey: Hospital Utilization - Access to care
import pandas as pd
from google.colab import files
uploaded = files.upload()

# Upload HUQ_L.XPT
demo_data = pd.read_sas('HUQ_L.XPT', format='xport')
# Rows of data view
print(demo_data.head())

# Load -  Survey: Hospital Utilization and Access to Care

survey_huq_path = 'HUQ_L.XPT'
access = pd.read_sas(survey_huq_path, format='xport')
access

# Load files - Laboratory Data - Plasma Fasting Glucose
import pandas as pd
from google.colab import files
uploaded = files.upload()

# Upload GLU_L.XPT
demo_data = pd.read_sas('GLU_L.XPT', format='xport')
# Rows of data view
print(demo_data.head())

# Load - Laboratory Data- Plasma Fasting Glucose

fasting_glucose_path = 'GLU_L.XPT'
glucose = pd.read_sas(fasting_glucose_path, format='xport')
glucose

# Load files - Laboratory Data - High-Sensitivity C-Reactive Protein
import pandas as pd
from google.colab import files
uploaded = files.upload()

# Upload HSCRP_L.XPT
demo_data = pd.read_sas('HSCRP_L.XPT', format='xport')
# Rows of data view
print(demo_data.head())

# Load - Laboratory Data- C-Reactive Protein

crp_path = 'HSCRP_L.XPT'
crp = pd.read_sas(crp_path, format='xport')
crp

# Load files - Laboratory Data - Total Cholesterol
import pandas as pd
from google.colab import files
uploaded = files.upload()

# Upload TCHOL_L.XPT
demo_data = pd.read_sas('TCHOL_L.XPT', format='xport')
# Rows of data view
print(demo_data.head())

# Load - Laboratory Data- Total Cholesterol

tchol_path = 'TCHOL_L.XPT'
tchol = pd.read_sas(tchol_path, format='xport')
tchol

# Load files - Examination Data - Body Measures
import pandas as pd
from google.colab import files
uploaded = files.upload()

# Upload BMX_L.XPT
demo_data = pd.read_sas('BMX_L.XPT', format='xport')
# Rows of data view
print(demo_data.head())

# Load Examination Data- Body Measures

body_path = 'BMX_L.XPT'
body = pd.read_sas(body_path, format='xport')
body

# Load files - Examination Data - Blood Pressure
import pandas as pd
from google.colab import files
uploaded = files.upload()

# Upload BPXO_L.XPT
demo_data = pd.read_sas('BPXO_L.XPT', format='xport')
# Rows of data view
print(demo_data.head())

# Load Examination Data- Blood Pressure

bp_path = 'BPXO_L.XPT'
bp = pd.read_sas(bp_path, format='xport')
bp

import pandas as pd
import numpy as np
import scipy.stats as stats
import seaborn as sns
import matplotlib.pyplot as plt

demo_data = pd.read_sas('DEMO_L.XPT', format='xport')
survey_data = pd.read_sas('HUQ_L.XPT', format='xport')
glu_data = pd.read_sas('GLU_L.XPT' , format='xport')
crp = pd.read_sas('HSCRP_L.XPT' , format='xport')
tchol = pd.read_sas('TCHOL_L.XPT' , format='xport')
bodymeasures = pd.read_sas('BMX_L.XPT' , format='xport')
bp = pd.read_sas('BPXO_L.XPT' , format='xport')

# Row review
print(demo_data.head())
print(survey_data.head())
print(glu_data.head())
print(crp.head())
print(tchol.head())
print(bodymeasures.head())
print(bp.head())

demo_data['marital_status'] = demo_data['DMDMARTZ'].replace({1: 'Married', 2: 'Not Married', 9: 'Other'})
print(demo_data[['DMDMARTZ', 'marital_status']].head())

# Missing values
print(demo_data['marital_status'].isnull().sum())

"""*Question 1: "Is there an association between marital status (married or not married) and education level (bachelor’s degree or higher vs. less than a bachelor’s degree)?"*

*Variables: DMDMARTZ (marital status) and DMDEDUC2 (education level). Recode as specified.*
"""

import pandas as pd
from scipy.stats import chi2_contingency

# Recode- marital status (1 = Yes Married, 2 = Not Married, 3 = Other)
demo_data['marital_status'] = demo_data['DMDMARTZ'].replace({1: 'Yes Married', 2: 'Not Married', 3: 'Other'})

# Recode- education level (1-3 = Less than Bachelor's, 4-6 = Bachelor's or Higher)
demo_data['education_level'] = demo_data['DMDEDUC2'].replace({
    1: 'Less than Bachelor\'s',
    2: 'Less than Bachelor\'s',
    3: 'Less than Bachelor\'s',
    4: 'Bachelor\'s or Higher',
    5: 'Bachelor\'s or Higher',
    6: 'Bachelor\'s or Higher'
  })

# clean missing data
demo_data_clean = demo_data.dropna(subset=['marital_status', 'education_level'])

# table
contingency_table = pd.crosstab(demo_data_clean['marital_status'], demo_data_clean['education_level'])

# chi test
chi2, p_value, dof, expected = chi2_contingency(contingency_table)
print("Contingency Table:\n", contingency_table)
print("Chi-Square Statistic:", chi2)
print("P-value:", p_value)

if p_value < 0.05:
    print("yes connection b/w marital status + education.")
else:
    print("no connection b/w marital status + education.")

"""*Question 2: "Is there a difference in the mean sedentary behavior time between those who are married and those who are not married?"*

*Variables: DMDMARTZ (marital status, recoded) and PAD680 (sedentary behavior time, cleaned).*

"""

import pandas as pd
from scipy.stats import ttest_ind

# Recode marital status (1 = Yes Married, 2 = Not Married)

demo_data['marital_status'] = demo_data['DMDMARTZ'].replace({1: 'Yes Married', 2: 'Not Married', 3: 'Other'})

# clean missing data
demo_data_clean = demo_data.dropna(subset=['marital_status', 'PAD680'])

# groups - married vs not married
married = demo_data_clean[demo_data_clean['marital_status'] == 'Married']['PAD680']
not_married = demo_data_clean[demo_data_clean['marital_status'] == 'Not Married']['PAD680']

print(demo_data.columns)

"""PAD680 not present in the data set...

*Question 3: "How do age and marital status affect systolic blood pressure?"*

*Variables: RIDAGEYR (age), DMDMARTZ (marital status, recoded), and BPXOSY3 (systolic blood pressure).*
"""

import pandas as pd
from scipy.stats import ttest_ind
# Recode marital status (1 = Yes Married, 2 = Not Married)
demo_data['marital_status'] = demo_data['DMDMARTZ'].replace({1: 'Married', 2: 'Not Married'})

# Clean missing rows
demo_data_clean = demo_data.dropna(subset=['marital_status', 'BPXOSY3'])

# Married vs Not Married
married_data = demo_data_clean[demo_data_clean['marital_status'] == 'Married']['BPXOSY3']
not_married_data = demo_data_clean[demo_data_clean['marital_status'] == 'Not Married']['BPXOSY3']

# t-test
t_stat, p_value = ttest_ind(married_data, not_married_data)

print("T-stat:", t_stat)
print("P-value:", p_value)

print(demo_data.columns)

"""BPXOSY3 not present in the data set..."""